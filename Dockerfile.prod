# Multi-stage build for production deployment

# Backend build stage
FROM golang:1.24-alpine AS backend-builder

# Install build dependencies
RUN apk add --no-cache build-base

WORKDIR /app

# Copy go mod files
COPY backend/go.mod backend/go.sum ./
RUN go mod download

# Copy backend source code
COPY backend/ .

# Build the backend application
RUN CGO_ENABLED=0 GOOS=linux go build -a -o main .

# Frontend build stage
FROM node:20-alpine AS frontend-builder

WORKDIR /app

# Copy package files
COPY frontend/package*.json ./
RUN npm ci --only=production

# Copy frontend source code
COPY frontend/ .

# Build the frontend application with production environment variables
ARG REACT_APP_API_BASE=/api
ARG REACT_APP_WS_BASE=
ENV REACT_APP_API_BASE=$REACT_APP_API_BASE
ENV REACT_APP_WS_BASE=$REACT_APP_WS_BASE

RUN npm run build

# Production stage
FROM nginx:alpine

# Install required packages
RUN apk --no-cache add ca-certificates

# Create app directory
WORKDIR /app

# Copy the backend binary from builder stage
COPY --from=backend-builder /app/main .

# Copy built frontend app to nginx
COPY --from=frontend-builder /app/build /usr/share/nginx/html

# Copy production nginx configuration
COPY nginx.prod.conf /etc/nginx/nginx.conf

# Create data directory
RUN mkdir -p /app/data

# Expose ports
EXPOSE 80 443

# Start script that runs both nginx and the backend
COPY start.sh /start.sh
RUN chmod +x /start.sh

CMD ["/start.sh"]